{"name":"SKS Spider","body":"# sks_spider\r\n# Tool to spider the PGP SKS keyserver mesh.\r\n\r\n***\r\n\r\nTo test my code status use the following URL:\r\n[![Build Status](https://secure.travis-ci.org/sgrayban/sks_spider.png?branch=master)](https://travis-ci.org/sgrayban/sks\\_spider)\r\n\r\n\r\n## Overview\r\n--------\r\n\r\nIf you don't know what PGP is or anything about the PGP keyservers, then\r\nthis tool is not for you.  Otherwise, read on.\r\n\r\nThis is a package which produces one binary, `sks_stats_daemon`.  This is a\r\nweb-server which goes to a seed SKS server, grabs stats, and spiders out\r\nfrom there.\r\n\r\nThe resulting daemon should be set behind a front-end web-server such as\r\nnginx, with the `/sks-peers` location dispatched to it.  If you run this\r\ndaemon listening on a publicly reachable port, or dispatch more of the URI\r\nnamespace to the daemon, you may have issues, as administrative URIs can\r\nlive outside of that prefix.\r\n\r\nAs well as a stats overview page, there is also an interface to grab lists\r\nof IPs meeting various serving criteria; I use that to build DNS zones\r\nautomatically, from cron, as a client of this service.  The client was\r\nunperturbed by the migration.\r\n\r\nThe original version was written in Python as a WSGI and grew organically.\r\nThis version is written in Golang (the Go programming language) and makes\r\nfairly decent use of Go's concurrency features.  It uses well under a fifth\r\nthe total RAM, something similarly smaller in RSS, uses less CPU (when busy,\r\n10% of an ancient CPU instead of all of one; when\r\n\"idle\" is not sitting at the top of top(1) output, using fractionally more\r\nCPU than a real idle process) and is _significantly_ more responsive.  These\r\nimprovements are in part because of Golang and in very large part because of\r\nthe ugliness of the old code.  Python's good, I'm bad.\r\n\r\nAll the production serving interface features have now been copied across;\r\nall that's left are some admin hooks which aren't really applicable (eg,\r\na list of Python threads for introspection).\r\nThose other features should not significantly impact resource consumption.\r\n\r\n\r\n## To-Do\r\n-----\r\n\r\n* Preserve more errors for the front-page?\r\n* Look over the admin interfaces, probably want `/rescanz` back\r\n* If add rescanz, need locking around spider starting; can preserve spider\r\n  handle while at it, and make it possible to, eg kill an existing scan using\r\n  a random nonce to authenticate, where the nonce has to be retrieved from\r\n  the logfile.\r\n\r\n\r\n## Packages\r\n--------\r\n\r\nI provide pre-built binaries for Linux/ELF x86Â (i686) (natively built on Debian) 32-bit-capable systems:\r\n\r\n1. https://keyserver.borgnet.us/downloads/\r\n1. https://bitbucket.org/sgrayban/sks_spider/downloads\r\n\r\n## Building\r\n--------\r\n\r\nFor the most part, `go get` should just work.\r\n\r\nThe exception is the btree support from https://github.com/runningwild/go-btree\r\nwhich is very nice, and written using generics, with the `gotgo`\r\npre-processor needed to emit a .go file.\r\n\r\nGrab https://github.com/droundy/gotgo and put some go1 `// +build ignore`\r\nmagic into a couple of the benchmark files, and you'll be able to build\r\nthe `gotgo` and `gotimports` commands.\r\n\r\nIn the `go-btree` directory, run:\r\n\r\n    gotgo -o btree.go btree.got string\r\n\r\nThere's probably a better way to sort out a namespace hierarchy which don't\r\nexpect only one instantiation of the generic, but I was grabbing a btree\r\nlibrary in passing and didn't investigate fully.\r\n\r\nAfter that, the btree import will work and the code should build with:\r\n\r\n    go build github.com/sgrayban/sks_spider/sks_stats_daemon.go\r\n\r\nIf you encounter problems, look at the `.travis.yml` file which is used\r\nfor running the Travis Continuous Integration tests:\r\n\t<https://travis-ci.org/sgrayban/sks_spider>.\r\nThat assumes some other prep steps run automatically by Travis, but the test\r\nlog should show everything in context.\r\n\r\n\r\n## Running\r\n-------\r\n\r\nYou can see the accepted parameters with the `-help` flag:\r\n\r\n    sks_stats_daemon -help\r\n\r\nYou might run, as an unprivileged user:\r\n\r\n    sks_stats_daemon -log-file /var/log/sks-stats.log\r\n\r\nNote that this tool does not self-detach from the terminal: I prefer to leave\r\nit where a supervising agent tool can easily watch it.  If you want it to\r\ndetach, then your OS should have available a wrapper command which will handle\r\nthat for you.\r\n\r\nThe log-file will need to be exist and be writable by that unprivileged\r\nuser (or be in a directory which that user can create new files in).\r\n\r\nNote that the logging does not currently log all HTTP requests; that's the\r\nresponsibility of the front-end (for now?).  Actually, the logging isn't\r\nproduction-grade.  It \"logs\", but that doesn't mean the logs have proven\r\nthemselves adequate at crunch time.\r\n\r\nThe horrible HTML templates (translated directly from my horrible Python\r\nones ... I'm _definitely_ not a UI designer) expect a style-sheet and a\r\n`favicon.ico` to be provided as part of the namespace, they're not served\r\nby this daemon.\r\n\r\nYes, this is a toy program.  It's a useful toy, but definitely not a\r\nshipping product.\r\n\r\n\r\nMy start-up script (OS-specific, not included) `touch`es and `chown`s\r\nthe log-file before starting the program.  It then runs, as the same\r\nrun-time user as is used for `sks` itself (for my convenience in user\r\nmanagement):\r\n\r\n    sks_stats_daemon -log-file /var/log/sks-stats.log \\\r\n      -json-persist /var/sks/stats-persist.json \\\r\n      -started-file /var/sks/stats.started\r\n\r\nThe `-json-persist` flag causes `sks_stats_daemon` to register a handler\r\nfor `SIGUSR1`; receipt of that signal causes the current mesh to be written to\r\nthe named file (removing any previous content), before exiting.\r\n\r\nThe start-up script takes a `quickrestart` argument, which sends `SIGUSR1`,\r\nwaits for the process to disappear, then starts `sks_stats_daemon` once more.\r\nIt then waits for the `-started-file` flag-file to appear, then removes it\r\nand exits.\r\n\r\n\r\n## nginx configuration\r\n-------------------\r\n\r\nIt's as simple as:\r\n\r\n    location /sks-peers {\r\n        proxy_pass          http://127.0.0.1:8001;\r\n        proxy_set_header    X-Real-IP $remote_addr;\r\n    }\r\n\r\nIn fact, you don't even need the X-Real-IP pass-through, but set it up now\r\nand it'll be easier to deal with a future change which logs the origin IP.\r\n\r\n## Apache configuration\r\n--------------------\r\n\r\n    <Location /sks-peers>\r\n    ProxyPass http://127.0.0.1:8001/sks-peers\r\n    SetEnv force-proxy-request-1.0 1\r\n    SetEnv proxy-nokeepalive 1\r\n    </Location>\r\n\r\n\r\n## License\r\n-------\r\n\r\nApache 2.0.\r\n\r\nMost people are nice and sane and in a world without subversion and lawyers,\r\nthis next bit wouldn't be necessary.  It's butt-covering, that's all.\r\n\r\nIf you send me a patch or a pull request, then by default:\r\n * I will add you to a CONTRIBUTORS file\r\n * You are assumed to be implicitly granting a license to me for your work to\r\n   be distributed under the same license, as part of a larger work\r\n * You are assumed to have the authority to submit the modification\r\n   under these terms and are implicitly testifying to this by making the\r\n   submission.\r\n\r\nIn other words: please don't be a jackass, contributions are expected to\r\ncontribute towards the codebase, not take away.  Thanks.\r\n\r\nThat's about it.  \r\n-Phil\r\n-Scott\r\n","tagline":"Tool to spider the PGP SKS keyserver mesh.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}